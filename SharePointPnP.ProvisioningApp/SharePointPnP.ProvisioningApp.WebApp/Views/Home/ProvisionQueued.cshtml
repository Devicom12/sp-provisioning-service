@model SharePointPnP.ProvisioningApp.Infrastructure.DomainModel.Provisioning.ProvisioningActionModel
@using SharePointPnP.ProvisioningApp.WebApp.Models

<section class="header-img">
    <div class="header-img-inner"></div>
</section>
<section class="pnp-hero">
    <div class="pnp-hero-inner">
        <div class="pnp-hero-title">
            <h1 class="pnp-hero-head">See the possibilities</h1>
            <div class="pnp-hero-subtl">
                Deploy &gt; Demonstrate &gt; Test
            </div>
        </div>
    </div>
</section>

<!-- Inner Content Wrapper -->
<div class="wrapper">
    <div class="wrapper-inner">
        <div class="pnp-form">
            <div class="pnp-svcteaser-inner">
                @(Html.Raw(Model.ProvisionDescription))

                <div>
                    <table>
                        <tr>
                            <th>@Html.LabelFor(m => m.NotificationEmail)</th>
                            <td>@Model.NotificationEmail</td>
                        </tr>
                        @if (Model.PackageProperties != null && Model.PackageProperties.Count > 0)
                        {
                            int i = 0;
                            foreach (var parameter in Model.PackageProperties)
                            {
                                if (Model.MetadataProperties.ContainsKey(parameter.Key))
                                {
                                    <tr>
                                        <th>@Model.MetadataProperties[parameter.Key].Caption</th>
                                        <td>
                                            @if (String.IsNullOrEmpty(Model.MetadataProperties[parameter.Key].Editor))
                                            {
                                                @Model.PackageProperties[parameter.Key]
                                            }
                                            else
                                            {
                                                @Html.Partial($"DisplayTemplates/{Model.MetadataProperties[parameter.Key].Editor}", new TemplateParameterModel { Index = i, ParameterKey = parameter.Key, ParameterValue = parameter.Value, MetadataProperty = Model.MetadataProperties[parameter.Key], SPORootSiteUrl = Model.SPORootSiteUrl, CorrelationId = Model.CorrelationId.ToString() })
                                            }
                                        </td>
                                    </tr>
                                }
                            }

                            i++;
                        }
                        @if (Model.UserIsTenantAdmin || Model.UserIsSPOAdmin)
                        {
                            if (Model.ApplyTheme && !Model.ApplyCustomTheme)
                            {
                                <tr>
                                    <th>@Html.LabelFor(m => m.ApplyTheme)</th>
                                    <td>@Model.ApplyTheme</td>
                                </tr>
                                <tr>
                                    <th>@Html.LabelFor(m => m.SelectedTheme)</th>
                                    <td>@Model.SelectedTheme</td>
                                </tr>
                            }
                            else if (Model.ApplyTheme && Model.ApplyCustomTheme)
                            {
                                <tr>
                                    <th>@Html.LabelFor(m => m.ApplyCustomTheme)</th>
                                    <td>@Model.ApplyCustomTheme</td>
                                </tr>
                                <tr>
                                    <th>@Html.LabelFor(m => m.ThemePrimaryColor)</th>
                                    <td>
                                        <span class="pnp-colorpreview" style="background-color: @Model.ThemePrimaryColor;"></span>
                                        @Model.ThemePrimaryColor
                                    </td>
                                </tr>
                                <tr>
                                    <th>@Html.LabelFor(m => m.ThemeBodyTextColor)</th>
                                    <td>
                                        <span class="pnp-colorpreview" style="background-color: @Model.ThemeBodyTextColor;"></span>
                                        @Model.ThemeBodyTextColor
                                    </td>
                                </tr>
                                <tr>
                                    <th>@Html.LabelFor(m => m.ThemeBodyBackgroundColor)</th>
                                    <td>
                                        <span class="pnp-colorpreview" style="background-color: @Model.ThemeBodyBackgroundColor;"></span>
                                        @Model.ThemeBodyBackgroundColor
                                    </td>
                                </tr>
                            }
                        }
                        <tr>
                            <th>@Resources.Messages.ProvisioningStatusTitle</th>
                            <td>
                                <div id="ProvisioningStatus">@Resources.Messages.ProvisioningInProgress</div>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <!-- build:js scripts/main.js -->
    <script src="/app/scripts/main.js"></script>
    <!-- endbuild -->

    <script>

        function toggleProvisioningStatus(message) {

            // get a reference to the provisioning status message
            var provisioningStatus = document.getElementById('ProvisioningStatus');

            // if the element is available
            if (provisioningStatus) {
                // update its status
                provisioningStatus.innerText = message;
            }
        }

        function toggleUrlLinks(failed) {

            // get a reference to the URL elements
            var siteUrlLinks = document.getElementsByClassName('siteUrlLink');
            var provisioningSiteUrlLinks = document.getElementsByClassName('provisioningSiteUrlLink');
            var failedSiteUrlLinks = document.getElementsByClassName('failedSiteUrlLink');

            // show those that are hidden, and hide those that are visible
            if (siteUrlLinks && siteUrlLinks.length > 0 &&
                provisioningSiteUrlLinks && provisioningSiteUrlLinks.length > 0 &&
                failedSiteUrlLinks && failedSiteUrlLinks.length > 0) {

                // hide the links with the workig on it animation
                for (var i = 0; i < provisioningSiteUrlLinks.length; i++) {
                    provisioningSiteUrlLinks[i].classList.toggle('hide');
                    provisioningSiteUrlLinks[i].classList.toggle('show');
                }

                if (!failed) {
                    // if it is not failed, show the URL links
                    for (var i = 0; i < siteUrlLinks.length; i++) {
                        siteUrlLinks[i].classList.toggle('hide');
                        siteUrlLinks[i].classList.toggle('show');
                    }
                }
                else {
                    // if it is failed, show the URL with the red cross
                    for (var i = 0; i < failedSiteUrlLinks.length; i++) {
                        failedSiteUrlLinks[i].classList.toggle('hide');
                        failedSiteUrlLinks[i].classList.toggle('show');
                    }
                }
            }
        }

        function checkProvisioningStatus() {
            fetch('../home/IsProvisioningCompleted?correlationId=' + encodeURI("@Html.ValueFor(m => m.CorrelationId)"), {
                method: 'get'
            })
                .then(response => {
                    return (response.json());
                })
                .then(data => {

                    // if the provisioning is completed
                    if (!data.running) {
                        // toggle the URLs visibility
                        toggleUrlLinks(data.failed);

                        if (data.failed) {
                            toggleProvisioningStatus('@Resources.Messages.ProvisioningFailed');
                        } else {
                            toggleProvisioningStatus('@Resources.Messages.ProvisioningCompleted');
                        }
                    }
                    // or in any other scenario
                    else {
                        // try again in 15 seconds
                        setTimeout(checkProvisioningStatus, 15000);
                    }
                })
                .catch(err => {
                    console.log(err);
                });
        }

        document.addEventListener('DOMContentLoaded', function () {

            // allow the body to be shorter than usual
            var bodyElements = document.getElementsByTagName("body");
            if (bodyElements && bodyElements.length == 1 &&
                !bodyElements[0].classList.contains("body-short")) {
                bodyElements[0].classList.add("body-short");
            }

            // allow the wrapper-inner to be shorter than usual
            var wrapperElements = document.getElementsByClassName("wrapper-inner");
            if (wrapperElements && wrapperElements.length == 1 &&
                !wrapperElements[0].classList.contains("wrapper-inner-short")) {
                wrapperElements[0].classList.add("wrapper-inner-short");
            }

            // check the provisioning status
            setTimeout(checkProvisioningStatus, 90000);
        });

    </script>
}